// Container widths
$grid-gutter-width: 30px !default;
$container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    xl: 1140px
) !default;
$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px
) !default;
@mixin make-container() {
    position: relative;
    width: 100%;
    padding-right: ($grid-gutter-width / 2);
    padding-left: ($grid-gutter-width / 2);
    margin-right: auto;
    margin-left: auto;
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            max-width: $container-max-width;
        }
    }
}

$enable-grid-classes: true !default;

//
// Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {
    .container {
        @include make-container();
        @include make-container-max-widths();
    }
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but with 100% width for
// fluid, full width layouts.

@if $enable-grid-classes {
    .container-fluid {
        @include make-container();
    }
}

*, ::after, ::before {
    box-sizing: border-box;
}

//==============Style common===============//
* {
    margin: 0;
    padding: 0;
}
html {
    height: 100%;
    box-sizing: border-box;
    font-size: 14px;
}
body {
    background: $bg-body;
    color: $text-main;
    font-family: $font-main;
    font-size: 14px;
    font-weight: 400;
    line-height: 1.5;
    position: relative;
    padding: 0;
    min-height: 100%;
    max-width: 1440px;
    margin: 0 auto;
}
b, strong {
    font-weight: 500;
}
a {
    display: inline-block;
    color: $text-main;
    text-decoration: none;
}
ul li {
    list-style: none;
}
p {
    margin-top: 0;
    line-height: 1.5em;
    font-size: 1em;
}
p + p {
    margin-top: 0.5em;
}
::placeholder,textarea {
    font-family: $font-main;
}
//*::-webkit-scrollbar {
//    width: 3px;
//}
//*::-webkit-scrollbar-thumb {
//    border-radius: 5px;
//    background-color: #E5E5E5;
//}
@media (max-width: 767.98px) {
    body{
        margin-bottom: 55px;
    }
}
